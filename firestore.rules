rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User subcollections
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Mood entries for each user
    match /users/{userId}/moodEntries/{entryId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat rooms
    match /rooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy || 
         request.auth.uid == request.resource.data.createdBy);
      
      // Messages in rooms
      match /messages/{messageId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.senderId;
        allow update: if request.auth != null && 
          request.auth.uid == resource.data.senderId;
        allow delete: if request.auth != null && 
          request.auth.uid == resource.data.senderId;
      }
    }
    
    // FeelNotes - allow anyone to read and like, only author to edit/delete
    match /users/{userId}/feelNotes/{noteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
        request.auth.uid == userId || // Author can edit
        (request.resource.data.keys().hasOnly(['likes']) && // Only likes field
         request.resource.data.likes is int) // Valid likes count
      );
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Direct Messages (DMs)
    match /dms/{conversationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      // Messages in DM conversation
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/dms/$(conversationId)).data.participants;
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // Support Circles
    match /supportCircles/{circleId} {
      // Anyone authenticated can read circles
      allow read: if request.auth != null;
      
      // Any authenticated user can create circles
      allow create: if request.auth != null;
      
      // Users can update circles (joining, leaving, or creator editing)
      allow update: if request.auth != null;
      
      // Allow delete (we use soft delete in code anyway)
      allow delete: if request.auth != null;
      
      // Member details subcollection
      match /memberDetails/{memberId} {
        // Authenticated users can read member details
        allow read: if request.auth != null;
        
        // Authenticated users can write member details
        allow write: if request.auth != null;
      }
      
      // Circle messages subcollection
      match /messages/{messageId} {
        // Authenticated users can read messages
        allow read: if request.auth != null;
        
        // Authenticated users can send messages
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.senderId;
      }
    }
  }
}
